package binary_search;

public class SingleElementinaSortedArray {


  /**
   * 30.Дан массив чисел СОРТИРОВАННЫЙХ, в этом массиве каждый элемент продублирован кроме одного,
   * необходимо за логарифмическое время и константую память найти этот единичный элемент
   * <p>
   * <p>
   * если мы говорим о логарифмической скорости то тут однозначно надо брать в расчет бинарный
   * поиск, модифицированный бинарный поиск, так же итерационным подходом
   *
   * <p>
   * Короче, тут надо делать так, берем цикл вайл, в нем крутимся до тех пор пока наши указатели на
   * начало и конец не встретятся берем миддл элемент, смотрим соседей этого мидла, если он один и
   * никого вокруг нет то это и есть наш элемент, если его брат стоит слева от него, смотрим длинну
   * подмассива, нам надо понять, куда нам мазафака идти бинарным поиском влево или вправо если
   * длинна левого подмассива НЕ ЧЕТНАЯ тогда и идем бинарным поиском влево если длинная подмассива
   * ЧЕТНАЯ тогда там все дубли хранятся, идем бинарным поиском вправо
   * <p>
   * сложность по времени: О(log n) сложность по памяти: О(1)
   */
  public static void main(String[] args) {
    int[] arr = {1, 1, 2, 2, 3};

    System.out.println(singleNonDuplicate(arr));
  }

  static int singleNonDuplicate(int[] nums) {
    int left = 0;
    int right = nums.length - 1;

    while (left < right) {
      int mid = left + (right - left) / 2;

      if (mid % 2 == 0) {
        // mid is even
        if (nums[mid] == nums[mid + 1]) {
          left = mid + 2;
        } else {
          right = mid;
        }

      } else {
        // mid is odd
        if (nums[mid] == nums[mid - 1]) {
          left = mid + 1;
        } else {
          right = mid;
        }
      }

    }
    return nums[left];
  }


}
