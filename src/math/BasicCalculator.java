package math;

import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

public class BasicCalculator {

  public static void main(String[] args) {
    System.out.println(calculate("(2+(2-2)-2)"));

    //System.out.println(calculate("100000000/1/2/3/4/5/6/7/8/9/10"));
  }


  /**
   * 207.BasicCalculator https://leetcode.com/problems/basic-calculator/
   * <p>
   * Имплементируй бейсик калькулятор для того что бы выполнить выражение в строчке, выражение может
   * содержать открытые и закрытые скобки, + и -, никаких умножений и делений а так же пробелыs ),
   * the plus + or minus sign -, non-negative integers and empty spaces . Input: "1 + 1" Output: 2
   * Input: " 2-1 + 2 " Output: 3 Example 3: Input: "(1+(4+5+2)-3)+(6+8)" Output: 23
   * <p>
   * стек стек и еще раз стек что мы храним в стеке? знаки плюс или минус! дада так как тут только
   * операции складывания и умножение все что нам надо сделать это всего лишь раскрыть правильно
   * скобки и применить правильную операцию плюс или минус в зависимости от того что стоит перед
   * открывающеся скобкой
   * <p>
   * так что делаем глобальны коллкетор локальный коллектор - для того что бы набивать длинные числа
   * 10232 как только встретили откр скобку то кладем на стек тот знак который стоит перед скобкой,
   * в стек кладем 1 или -1 для того что бы потом просто умножать
   * <p>
   * если скобка закрывающася то последний крайний знак надо из стек попнуть - это значит все мы
   * прошли эти скобки
   * <p>
   * как только встретили плюс или минус значит мы только что набили локальный коллектор и нам надо
   * понять что делать с ним и с глобальнымКоллектором как это понять взять последний sign -> result
   * += sign * currNum;
   * <p>
   * и обновить знак для сл операций sign = stack.peek() * (currCh == '+' ? 1 : -1);
   * <p>
   * в конце по выходу из цикла мы финальный раз обновляем наш глобальный коллектор знаком и
   * значением из локального коллектора
   *
   * @param str
   * @return
   */
  static int calculate(String str) {

    if (str == null) {
      return 0;
    }

    int result = 0;
    int sign = 1;
    int currNum = 0;

    Stack<Integer> stack = new Stack<>();
    stack.push(sign);

    //раскручиваем строчку
    for (int i = 0; i < str.length(); i++) {
      //текуший символ
      char currCh = str.charAt(i);

      if (Character.isDigit(currCh)) {
        //набиваем текущее число, мало ли там 10 разрядное
        //для этого добавляем один разряд
        currNum = currNum * 10 + (currCh - '0');
      } else if (currCh == '+' || currCh == '-') {
        //если это знак плюс минус - то это сигнал о том что пора складывать
        //или вычитать

        result += sign * currNum;

        // определяем знак для будущих поколений
        sign = stack.peek() * (currCh == '+' ? 1 : -1);

        //обнуляем текущее число потому что будем в сл итерациях набивать его по новому
        currNum = 0;

      } else if (currCh == '(') {
        //если это откр или закр скобка то пушим в стек наш знак
        stack.push(sign);

      } else if (currCh == ')') {
        stack.pop();
      }
    }

    result += sign * currNum;
    return result;
  }


}
