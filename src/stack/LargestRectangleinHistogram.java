package stack;

import java.util.Stack;

public class LargestRectangleinHistogram {

    public static void main(String[] args) {

        int[] arr = {2, 1, 5, 6, 2, 3};
        System.out.println(largestRectangleArea(arr));
    }

    /**
     *
     простой подход здесь крутится в цикле и спрашивать каждую плашку - а если ты плашка будешь началом нашего
     прямоугольника - какую максимальную площадь он может дать (беря в расчет минимумы конечно же)ё

     более умный подход заключается в том что бы использовать стек, а как стек??
     идея в том что мы будем трекать багаж как бы, то есть все элементы которые больше либо равны текущему итому,
     а как только мы встретили элемент который меньше нашего последнего на стеке - это повод посчитать площадь
     и обновить макс площадь
     */
    static int largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();

        //накладываем в стек ИНДЕКСЫ
        stack.push(-1);

        int maxSquare = 0;

        for (int i = 0; i < heights.length; ++i) {

            //крутимся в цикле до тех пор пока стек не опустеет, как бы,
            //делая поправку на -1
            //либо пока мы не встретим элемент который больше чем наш последний лежащий на стеке
            //если мы встретили элемент который меньше чем наш последний на стеке - это повод
            //посчитать всю ту площадь что он может дать - НЕ БЕРЯ В РАСЧЕТ ТЕКУЩИЙ ЭЛЕМЕНТ
            //потому что текущий элемент это уже новая эпопея
            while (stack.peek() != -1 && heights[i] < heights[stack.peek()]) {
                // в цикле постоянно считаем нашу площадь
                int height = heights[stack.pop()];
                int countOfBars = i - stack.peek() - 1;
                int newSquare = height * countOfBars;
                //и пытаемся обновить максимальную площадь
                maxSquare = Math.max(maxSquare, newSquare);
            }
            //как только мы поняли что стек мы исчерпали
            //либо наш текущий элемент больше либо равен - мы продалжаем накладывать в стек
            //либовстретили элемент который МЕНЬШЕ чем наш лежащий на стеке
            //то пушим обязательо индекс
            stack.push(i);
        }
        //ну и в конце надо обязательно попробовать исчерпать все элементы стека
        //потому что мы не знаем что мы там встретили дойдя до конца крутясь в цикле
        while (stack.peek() != -1){
            maxSquare = Math.max(maxSquare, heights[stack.pop()] * (heights.length - stack.peek() - 1));
        }
        return maxSquare;
    }
}
