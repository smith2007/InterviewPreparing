package dynamic_programming;

public class RegularExpressionMatching {

    public static void main(String[] args) {
        System.out.println(isMatch("aa", "aa"));
    }

    /**
     * решаем через рекурсию. а как??
     * ну есть вариант
     */
    static boolean isMatch(String s, String p) {
        //успех является то что мы дошли до конца нашей строки p - то есть наш паттерн кончился
        //далее нам необходимо проверить - а мы вообще дошли до конца основной строки s??
        if (p.length() == 0) {
            return s.length() == 0;
        }
        //если паттерн еще есть то нам надо проверить то что следующий символ звездочка
        if (p.length() > 1 && p.charAt(1) == '*') {
            //если да делаем гипотезу что мы скипаем
            //первые два символа из паттерна будто опускаем их
            // например у нас вот такая ситуация
            //s = "aab" p = "c*a*b" - в этой ситуации с может повторяться 0 раз и более потому что *
            // вот мы и как раз проверим это откусив два первых символа
            if (isMatch(s, p.substring(2))) {
                return true;
            }
            //а вот если у нас еще и два символа одинаковые стоят или точка (а точка это любой единичный)
            //например ситуация
            //s = "aa" p = "a*"
            // то вот тогда надо убрать первую букву уже у основной строки!!
            //внимание У ОСНОВНОЙ строки так как в паттерне звездочка стоит
            //и запускаем рекурсию тут
            if (isDotOrSameLetters(s, p)) {
                return isMatch(s.substring(1), p);
            }
            return false;
        } else {
            //а тут ситуация когда второй символ не звездочка
            //вот тут нам уже просто надо проверить что символы равны или в паттерне стоит точка
            if (isDotOrSameLetters(s, p)) {
                //если да откусываем от паттерна
                //и откусываем от основной строки
                //внимание У ОБОИХ! так как звездочки там нет
                return isMatch(s.substring(1), p.substring(1));
            }
            return false;
        }
    }

    private static boolean isDotOrSameLetters(String s, String p) {
        return s.length() > 0 && (p.charAt(0) == '.' || s.charAt(0) == p.charAt(0));
    }
}
